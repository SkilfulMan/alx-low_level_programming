!<arch>
0-isupper.o/    0           0     0     644     279       `
#include "main.h"



/**
 * _isupper - checks if parameter is an uppercase character.
 *
 * @c: input character.
 *
 * Return: 1 if is an uppercase character, 0 in other case.
 *
 */

int _isupper(int c)
{
	if (c >= 65 && c <= 90)
	{
		return (1);
	}
	else
	{
		return (0);
	}
}

0-memset.o/     0           0     0     644     314       `
#include "main.h"

/**
 * _memset - function that fills memory with a constant byte.
 *
 * @s: mamory area to return
 * @b: constant byte
 * @n: size of bytes
 * Return: char
 */

char *_memset(char *s, char b, unsigned int n)
{
	unsigned int i = 0;

	while (i < n)
	{

		*(s + i) = b;
		i += 1;
	}
	return (s);
}
0-strcat.o/     0           0     0     644     417       `
#include "main.h"
/**
 *  * _strcat - concatenates two strings,
 *   * @dest: destination.
 *    * @src: source.
 *     * Return: the pointer to dest.
 */
char *_strcat(char *dest, char *src)
{
		int count = 0, count2 = 0;

	while (*(dest + count) != '\0')
	{
		count++;
	}
	while (count2 >= 0)
	{
		*(dest + count) = *(src + count2);
	if (*(src + count2) == '\0')
	break;
		count++;
		count2++;
	}
	return (dest);
}

100-atoi.o/     0           0     0     644     488       `
#include "main.h"
/**
 * _atoi - converts a string to an integer.
 * @s: the string to convert
 * Return: the converted string.
 */
int _atoi(char *s)
{
	short boolean;
	int i, minus, result;

	i = minus = result = boolean = 0;
	minus = -1;

	while (s[i] != '\0')
	{
		if (s[i] == '-')
			minus *= -1;

		if (s[i] >= '0' && s[i] <= '9')
		{
			result *= 10;
			result -= (s[i] - '0');
			boolean = 1;
		}
		else if (boolean == 1)
			break;
		i++;
	}
	result *= minus;
	return (result);
}
2-strchr.o/     0           0     0     644     339       `
#include "main.h"
#include <stdio.h>

/**
 * _strchr - function that locates a character in a string.
 *
 * @s: string to receive and return
 * @c: character to receive
 * Return: char
 */

char *_strchr(char *s, char c)
{
	while (*s != '\0')
	{
		if (*s == c)
			return (s);
		s++;
	}
	if (*s == c)
		return (s);
	else
		return (NULL);
}

2-strncpy.o/    0           0     0     644     339       `
#include "main.h"
/**
 * _strncpy - copies a string
 * @dest: destination.
 * @src: source.
 * @n: amount of bytes from src.
 * Return: the pointer to dest.
 */

char *_strncpy(char *dest, char *src, int n)
{
		int i;

	for (i = 0; i < n && src[i] != '\0'; i++)
		dest[i] = src[i];
	for ( ; i < n; i++)
		dest[i] = '\0';
	return (dest);
}

1-isdigit.o/    0           0     0     644     236       `
#include "main.h"

/**
 *  * _isdigit - function that checks for a digit (0 through 9).
 *   * @c: input value to check.
 *    * Return: int.
 */

int _isdigit(int c)
{
	if (c >= 48 && c <= 57)
	{
		return (1);
	}
	else
		return (0);
}
1-memcpy.o/     0           0     0     644     350       `
#include "main.h"

/**
 * _memcpy - function that copies memory area.
 *
 * @dest: dest positions
 * @src: source position
 * @n: size of bytes
 * Return: char
 */

char *_memcpy(char *dest, char *src, unsigned int n)
{
	unsigned int i = 0;
	unsigned int j = 0;

	while (i < n)
	{
		*(dest + i) = *(src + j);
		i += 1;
		j += 1;
	}
	return (dest);
}
1-strncat.o/    0           0     0     644     449       `
#include "main.h"
/**
 * _strncat - concatenates two strings,
 * @dest: destination.
 * @src: source.
 * @n: amount of bytes used from src.
 * Return: the pointer to dest.
 */
char *_strncat(char *dest, char *src, int n)
{
		int count = 0, count2 = 0;

	while (*(dest + count) != '\0')
	{
		count++;
	}
	while (count2 < n)
	{
		*(dest + count) = *(src + count2);
	if (*(src + count2) == '\0')
		break;
			count++;
			count2++;
	}
		return (dest);
}

3-islower.o/    0           0     0     644     256       `
#include "main.h"

/**
 *  * _islower - Checks for lowercase character
 *   * @c: The character to be checked
 *    *
 *     * Return: 1 if c is lowercase, otherwise 0
 */
int _islower(int c)
{
	if (c >= 'a' && c <= 'z')
	return (1);
		else
	return (0);
}
3-puts.o/       0           0     0     644     233       `
#include "main.h"

/**
 * _puts - function that prints a string
 *
 * @str: pointer to char
 * Return: nothing
 */

void _puts(char *str)
{
		int i = 0;

	while (str[i] != '\0')
	{
	_putchar(str[i]);

		i += 1;
	}
	_putchar('\n');
}

3-strcmp.o/     0           0     0     644     367       `
#include "main.h"
/**
 * _strcmp - compares two strings
 * @s1: first string.
 * @s2: second string.
 * Return: 0 if s1 and s2 are equals,
 * another number if not.
 */

int _strcmp(char *s1, char *s2)
{
		int i = 0, op = 0;

	while (op == 0)
					{
	if ((*(s1 + i) == '\0') && (*(s2 + i) == '\0'))
		break;
			op = *(s1 + i) - *(s2 + i);
				i++;
	}
	return (op);
}

3-strspn.o/     0           0     0     644     471       `
#include "main.h"

/**
 * _strspn - function that gets the length of a prefix substring.
 *
 * @s: initial segment
 * @accept: bytes to check
 * Return: unsigned int
 */

unsigned int _strspn(char *s, char *accept)
{
	unsigned int cont = 0;
	int j = 0;
	int flag;

	while (*s != '\0')
	{
		flag = 0;
		while (*(accept + j) != '\0')
		{
			if (*s == *(accept + j))
				flag = 1;
			j += 1;
		}
		j = 0;
		if (flag == 0)
			break;
		cont += 1;
		s++;
	}
		return (cont);
}

4-isalpha.o/    0           0     0     644     303       `
#include "main.h"

/**
 *  * _isalpha - Checks for alphabetic character
 *   * @c: The character to check
 *    *
 *     * Return: 1 if c is a letter, lowercase or uppercase. 0 otherwise
 */
int _isalpha(int c)
{
	if ((c >= 'A' && c <= 'Z') || (c >= 'a' && c <= 'z'))
	return (1);
		else
	return (0);
}

4-strpbrk.o/    0           0     0     644     450       `
#include "main.h"
#include <stdio.h>

/**
 * _strpbrk - function that searches a string for any of a set of bytes.
 *
 * @s: string to receive
 * @accept: bytes to accept
 * Return: char
 */

char *_strpbrk(char *s, char *accept)
{
	int j = 0;
	int flag;

	while (*s != '\0')
	{
		flag = 0;
		while (*(accept + j) != '\0')
		{
			if (*s == *(accept + j))
				flag = 1;
			j++;
		}
		j = 0;
		if (flag == 1)
			return (s);
		s++;
	}
	return (NULL);
}
5-strstr.o/     0           0     0     644     485       `
#include "main.h"
#include <stdio.h>

/**
 *  _strstr -  function that locates a substring.
 *
 * @haystack: initial string
 * @needle: substring
 * Return: char
 */

char *_strstr(char *haystack, char *needle)
{
	char *res;
	char *aux;

	while (*haystack != '\0')
	{
		res = haystack;
		aux = needle;

		while (*aux == *haystack && *aux != '\0'
				&& *haystack != '\0')
		{
			haystack++;
			aux++;
		}
		if (*aux == '\0')
			return (res);
		haystack = res + 1;
	}
	return (NULL);
}

6-abs.o/        0           0     0     644     232       `
#include "main.h"

/**
 * _abs - Computes the absolute value
 * of an integer.
 *
 * @i: input number as an integer.
 *
 * Return: absolute value
 */
int _abs(int i)
{
	if (i >= 0)
	{
	return (i);
	}
	else
	{
	return (i * -1);
	}
}
9-strcpy.o/     0           0     0     644     317       `
#include "main.h"

/**
 * _strcpy - function that copies the string
 *
 * @dest: pointer to destination char
 * @src: pointer to source char
 * Return: char
 */

char *_strcpy(char *dest, char *src)
{
		int i;

	for (i = 0; src[i] != '\0'; i++)
	{
	*(dest + i) = *(src + i);
	}
	*(dest + i) = '\0';
	return (dest);
}

2-strlen.o/     0           0     0     644     223       `
#include "main.h"

/**
 * _strlen - function that returns the length of a string.
 *
 * @s: pointer to an string
 * Return: int
 */

int _strlen(char *s)
{
		int i = 0;

	while (s[i] != '\0')
	{
		i += 1;
	}
	return (i);
}

main.o/         0           0     0     644     142       `
#include "main.h"

int main(void)
{
	_puts("\"At the end of the day, my goal was to be the best hacker\"\n\t- Kevin Mitnick");
	return (0);
}
_putchar.o/     0           0     0     644     248       `
#include <unistd.h>

/**
 * _putchar - writes the character c to stdout
 * @c: The character to print
 *
 * Return: On success 1.
 * On error, -1 is returned, and errno is set appropriately.
 */
int _putchar(char c)
{
		return (write(1, &c, 1));
}
